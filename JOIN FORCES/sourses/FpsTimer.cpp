//--------------------------------------------------------------------------------------
// File: FpsTimer.cpp
// Author:Imase Hideyasu
//
//--------------------------------------------------------------------------------------
#include "FpsTimer.h"

//--------------------------------------------------------------------------------------
// コンストラクタ
//--------------------------------------------------------------------------------------
Timer::Timer()
{
	// CPU周波数取得
	QueryPerformanceFrequency(&m_CpuFrequency);

	// タイマーのリセット
	Reset();
}


//--------------------------------------------------------------------------------------
// タイマーのリセット
//--------------------------------------------------------------------------------------
void Timer::Reset(VOID)
{
	QueryPerformanceCounter(&m_OffsetTime);
}


//--------------------------------------------------------------------------------------
// タイマーの取得
//--------------------------------------------------------------------------------------
DWORD Timer::Get()
{
	LARGE_INTEGER c;

	QueryPerformanceCounter(&c);

	return  (DWORD)((c.QuadPart - m_OffsetTime.QuadPart) / (m_CpuFrequency.QuadPart / 1000));
}


//--------------------------------------------------------------------------------------
// コンストラクタ
//--------------------------------------------------------------------------------------
FpsTimer::FpsTimer()
{
	//	ディフォルト値を設定
	SetFps(60);
}


//--------------------------------------------------------------------------------------
// ＦＰＳの設定
//--------------------------------------------------------------------------------------
DWORD FpsTimer::SetFps(DWORD fps)
{
	DWORD tmp = m_fps;

	//	FPS
	m_fps = fps;

	//	１フレーム辺り何ミリ秒か算出（精度を上げるため×0x10000してある）
	m_fpsWait = 1000 * 0x10000 / m_fps;

	//	１フレーム辺りの待ち時間の端数部分を保持するワーク
	m_fpsWaitTT = 0;

	//	前回の描画した時間
	m_lastDraw = Get();

	//	フレームスキップフラグを初期化
	m_drawSkipFlag = FALSE;

	//	描画した回数
	m_drawCnt = 0;

	return tmp;
}

//--------------------------------------------------------------------------------------
// ウエイト
//--------------------------------------------------------------------------------------
void FpsTimer::Wait()
{
	//	現在のタイマー値取得
	DWORD timer = Get();

	//	１秒辺りのFPSを測定するために時刻の履歴を取っておく
	m_drawTime[m_drawCnt & 0x1f] = timer;
	if (++m_drawCnt == 64) m_drawCnt = 32;

	//	次に描画する時刻決定（固定少数を使用して精度をあげている）
	m_fpsWaitTT = (m_fpsWaitTT & 0xffff) + m_fpsWait;

	//	今回１フレーム辺りの時間を決める（単位ms）
	DWORD wait = m_fpsWaitTT >> 16;

	//	前回の描画からの経過時間を求める
	DWORD elp = (timer - m_lastDraw);

	//	今回の描画タイミングをもう過ぎている（スリープが入れられない！）
	if( elp >= wait )
	{
		//	どれだけ時間オーバーしてるか求める
		DWORD delay = elp - wait;

		//	1/4秒以上の遅延は無視して描画する
		if (delay >= 250) delay = 0;

		//	遅延が１フレーム以上なら次の描画をスキップする
		m_drawSkipFlag = (delay >= wait);

		//	描画すべき時間に描画したことにしておく（実際の描画は遅れている）
		timer -= delay;
		m_lastDraw = timer;
	}
	else
	{
		//	描画スキップなし
		m_drawSkipFlag = false;

		//	次のフレームになるまで待つ
		while( elp < wait )
		{
			_mm_pause();
			elp = (Get() - m_lastDraw);
		}

		//	最終描画時間を更新
		m_lastDraw += elp;
	}
	Sleep(0);
}

//--------------------------------------------------------------------------------------
// 実際のＦＰＳの算出
//--------------------------------------------------------------------------------------
DWORD FpsTimer::GetRealFps()
{
	//	履歴が溜まってないので計測不可
	if (m_drawCnt < 32) return 0;

	//	31フレームのトータル時間から１秒あたりのフレーム数を求める
	DWORD t = m_drawTime[(m_drawCnt - 1) & 0x1f] - m_drawTime[m_drawCnt & 0x1f];

	//	計測不可
	if (t == 0) return 0;

	//	四捨五入分(0.5)足している
	return (1000 * 31 + t / 2) / t;
}
