//////////////////////////////////////////////////////
//
//	詳細		：エフェクト管理クラスメソッド
//	作成者		：岸　将史
//	最終更新日	：2014/04/17
//
//////////////////////////////////////////////////////
#include "EffectManager.h"


/*************************************************************************

作成者		：岸　将史
最終更新日	：2013/12/24
用途		：−
第１引数	：−
返却値		：−

*************************************************************************/
C_EffectManager::C_EffectManager(){
}


/*************************************************************************

作成者		：岸　将史
最終更新日	：2013/12/24
用途		：配列内のエフェクトを全削除する
第１引数	：−
返却値		：−

*************************************************************************/
C_EffectManager::~C_EffectManager(){
	std::list<C_EffectTask*>::iterator iter;

	for ( iter = m_effectList.begin(); iter != m_effectList.end(); ){
		delete (*iter);
		iter = m_effectList.erase( iter );
	}
}


/*************************************************************************

作成者		：岸　将史
最終更新日	：2014/04/17
用途		：list内を順番にアクセスし死亡フラグが立っていたら削除する
第１引数	：−
返却値		：正常終了→true, 異常検知→false

*************************************************************************/
bool C_EffectManager::Update(){
	// アクセスするためのイテレータを作成
	std::list<C_EffectTask*>::iterator iter;

	for (iter = m_effectList.begin(); iter != m_effectList.end(); ){
		// 死んでいたらデータを消す
		if ( (*iter)->IsDead() ) {
			Macro::SAFE_DELETE (*iter);
			iter = m_effectList.erase( iter );
		}
		else {
			// エフェクトを更新する
			(*iter)->Update();
			++iter;
		}
	}

	return true;
}


/*************************************************************************

作成者		：岸　将史
最終更新日	：2013/12/24
用途		：list内のエフェクトの描画を行う
第１引数	：−
返却値		：−

*************************************************************************/
void C_EffectManager::Draw(){
	// 配列にアクセスする為のイテレータ
	std::list<C_EffectTask*>::iterator iter;

	for ( iter = m_effectList.begin(); iter != m_effectList.end(); ){
		(*iter)->Draw();
		++iter;
	}
}


/*************************************************************************

作成者		：岸　将史
最終更新日	：2013/12/24
用途		：配列にエフェクトを登録する
第１引数	：−
返却値		：正常終了→true, 異常検知→false

*************************************************************************/
bool C_EffectManager::EntryTask( C_EffectTask* task ){

	m_effectList.push_back( task );

	return true;
}